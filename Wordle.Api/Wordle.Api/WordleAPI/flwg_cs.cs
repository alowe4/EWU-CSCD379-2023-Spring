//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System.Runtime.InteropServices;

public class flwg_cs {

    public static void ChooseFirstWord(SWIGTYPE_p_wordDataArray IntToWord_HashMap) {
    flwg_csPINVOKE.ChooseFirstWord(SWIGTYPE_p_wordDataArray.getCPtr(IntToWord_HashMap));
  }

  public static SWIGTYPE_p_wordDataArray Allocate_IntToWordStruct() {
    global::System.IntPtr cPtr = flwg_csPINVOKE.Allocate_IntToWordStruct();
    SWIGTYPE_p_wordDataArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wordDataArray(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_p_p_DummyHeadNode Allocate_WordToInt() {
    global::System.IntPtr cPtr = flwg_csPINVOKE.Allocate_WordToInt();
    SWIGTYPE_p_p_p_DummyHeadNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_p_DummyHeadNode(cPtr, false);
    return ret;
  }

  public static void Initialize_HashMaps(SWIGTYPE_p_p_p_DummyHeadNode WordToInt_HashMap, SWIGTYPE_p_wordDataArray IntToWord_HashMap, string path) {
    flwg_csPINVOKE.Initialize_HashMaps(SWIGTYPE_p_p_p_DummyHeadNode.getCPtr(WordToInt_HashMap), SWIGTYPE_p_wordDataArray.getCPtr(IntToWord_HashMap), path);
  }

  public static void Free_HashMaps(SWIGTYPE_p_p_p_DummyHeadNode WordToInt_HashMap, SWIGTYPE_p_wordDataArray IntToWord_HashMap) {
    flwg_csPINVOKE.Free_HashMaps(SWIGTYPE_p_p_p_DummyHeadNode.getCPtr(WordToInt_HashMap), SWIGTYPE_p_wordDataArray.getCPtr(IntToWord_HashMap));
  }

  public static int Convert_WordToInt(string word, SWIGTYPE_p_p_p_DummyHeadNode WordToInt_HashMap) {
    int ret = flwg_csPINVOKE.Convert_WordToInt(word, SWIGTYPE_p_p_p_DummyHeadNode.getCPtr(WordToInt_HashMap));
    return ret;
  }

  public static string Convert_IntToWord(int wordID, SWIGTYPE_p_wordDataArray IntToWord_HashMap) {
    string ret = flwg_csPINVOKE.Convert_IntToWord(wordID, SWIGTYPE_p_wordDataArray.getCPtr(IntToWord_HashMap));
    return ret;
  }

  public static SWIGTYPE_p_WordSet init_WordSet(int totalWords) {
    global::System.IntPtr cPtr = flwg_csPINVOKE.init_WordSet(totalWords);
    SWIGTYPE_p_WordSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_WordSet(cPtr, false);
    return ret;
  }

  public static void reset_WordSet(SWIGTYPE_p_WordSet wordSet) {
    flwg_csPINVOKE.reset_WordSet(SWIGTYPE_p_WordSet.getCPtr(wordSet));
  }

  public static uint checkIfUsed_WordSet(int wordID, SWIGTYPE_p_WordSet wordSet) {
    uint ret = flwg_csPINVOKE.checkIfUsed_WordSet(wordID, SWIGTYPE_p_WordSet.getCPtr(wordSet));
    return ret;
  }

  public static void markUsed_WordSet(int wordID, SWIGTYPE_p_WordSet wordSet) {
    flwg_csPINVOKE.markUsed_WordSet(wordID, SWIGTYPE_p_WordSet.getCPtr(wordSet));
  }

  public static void free_WordSet(SWIGTYPE_p_WordSet wordSet) {
    flwg_csPINVOKE.free_WordSet(SWIGTYPE_p_WordSet.getCPtr(wordSet));
  }

  public static int botPly(int word, int depth, SWIGTYPE_p_wordDataArray IntToWord_HashMap, SWIGTYPE_p_WordSet wordSet) {
    int ret = flwg_csPINVOKE.botPly(word, depth, SWIGTYPE_p_wordDataArray.getCPtr(IntToWord_HashMap), SWIGTYPE_p_WordSet.getCPtr(wordSet));
    return ret;
  }

}
